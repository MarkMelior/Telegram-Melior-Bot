from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram import types, Dispatcher
from aiogram.dispatcher.filters import Text
import var
from aiogram.dispatcher import FSMContext
import functions


async def start(msg: types.Message):
    await msg.answer_photo(var.img_start, var.StartMainDesc, reply_markup = var.ikb_Main(msg))

async def start_call(call: types.CallbackQuery):
    if call.data == 'start':
        await call.message.delete()

    if call.data == 'start_save':
        from bot import bot
        await bot.edit_message_reply_markup(chat_id = call.message.chat.id, message_id = call.message.message_id)

    await call.message.answer_photo(var.img_start, var.StartMainDesc, reply_markup = var.ikb_Main(call))




additional_nosub_ikb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton('‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data = 'chech_sub')],
])
functions.ButtonBack(additional_nosub_ikb)

additional_sub_ikb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton('üìå –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞', callback_data = 'additional')]
])
functions.ButtonBack(additional_sub_ikb)

additional_ikb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton('ü§ë [–ò–≥—Ä–∞] –≠–∫–æ–Ω–æ–º–∏–∫–∞', callback_data = 'game')],
    [InlineKeyboardButton('‚ùáÔ∏è [–ù–µ–π—Ä–æ—Å–µ—Ç—å] ChatGPT', callback_data = 'chatgpt')],
    # [InlineKeyboardButton('üëæ [–§–æ—Ç–æ] –î–µ–º–æ—Ç–∏–≤–∞—Ç–æ—Ä', callback_data = 'demotivator')],
    # [InlineKeyboardButton('üîâ [–û–∑–≤—É—á–∫–∞] –°–æ–æ–±—â–µ–Ω–∏—è', callback_data = 'voiceover')],
    # [InlineKeyboardButton('‚ù§Ô∏è –û–Ω–ª–∞–π–Ω –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞', callback_data = 'online_dating')],
])
functions.ButtonBack(additional_ikb)


async def additional(call: types.CallbackQuery):
    from bot import bot
    user_channel_status = await bot.get_chat_member(chat_id = var.live_chat_id, user_id = call.from_user.id)
    if user_channel_status["status"] == 'left':
        await call.message.delete()
        await call.message.answer_photo(var.img_sub_live, '‚ú® –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º –±–æ—Ç–∞ ‚Äî –Ω—É–∂–Ω–æ –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –Ω–∞ @MeliorLive', reply_markup = additional_nosub_ikb)
        return
    
    await call.message.delete()
    await call.message.answer_photo(var.img_additional, '‚ú® –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ @MeliorLive \n\n <i>–í –±—É–¥—É—â–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞ –±—É–¥–µ—Ç —Ä–∞—Å—Ç–∏</i>', reply_markup = additional_ikb)


async def chech_sub(call: types.CallbackQuery):
    from bot import bot
    user_channel_status = await bot.get_chat_member(chat_id = var.live_chat_id, user_id = call.from_user.id)
    if user_channel_status["status"] == 'left':
        await call.message.edit_media(types.InputMediaPhoto(var.img_you_nosub))
        await call.message.edit_caption(f'‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ @MeliorLive', reply_markup = additional_nosub_ikb)
        return
    
    await call.message.edit_media(types.InputMediaPhoto(var.img_you_sub))
    await call.message.edit_caption(f'‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! \n\n–¢–µ–ø–µ—Ä—å –¥–ª—è —Ç–µ–±—è –¥–æ—Å—Ç—É–ø–Ω—ã –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞', reply_markup = additional_sub_ikb)









# ! –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è
# –§–æ—Ç–æ -> ID —Ñ–æ—Ç–æ
async def handle_photo(msg: types.Message):
    id_photo = msg.photo[-1].file_id
    user_id = msg.from_user.id
    current_chat_id = msg.chat.id
    reply_message_id = msg.reply_to_message.message_id if msg.reply_to_message else None
    await msg.reply( f'Photo ID: <code>{id_photo}</code>\n\nUser ID: <code>{user_id}</code>\n\nCurrent chat ID: <code>{current_chat_id}</code>\n\nReply message ID: <code>{reply_message_id}</code>', protect_content = False )

async def video_file_id(message: types.Message):
    await message.reply(message.video.file_id, protect_content = False)

# –£–¥–∞–ª—è—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø–æ–ø–∞–ª–∏ –≤ handlers
async def all_callback(msg: types.Message):
    await msg.delete()

async def callback_nope(_):
    pass




def reg_main(dp: Dispatcher):
    dp.register_message_handler(start, commands = ['start', 'help'])
    dp.register_callback_query_handler(start_call, Text(['start', 'start_save']))
    dp.register_callback_query_handler(additional, Text('additional'))
    dp.register_callback_query_handler(chech_sub, Text('chech_sub'))

    dp.register_callback_query_handler(callback_nope, Text(['nope', 'null', 'none']))
    dp.register_message_handler(handle_photo, content_types=['photo'])
    dp.register_message_handler(video_file_id, content_types=['video'])
    dp.register_message_handler(all_callback)