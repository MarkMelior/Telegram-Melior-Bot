import asyncio
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram import Dispatcher, types
import functions
from SQL import cursor, connection
from aiogram.dispatcher.filters.state import StatesGroup, State
import random
import var
from var import add_cash, add_xp


# 1 - –ë–∏–∑–Ω–µ—Å
cursor.execute( "DROP TABLE IF EXISTS shop_business" )
cursor.execute( """CREATE TABLE IF NOT EXISTS shop_business (
    business_id SERIAL PRIMARY KEY,
    name TEXT,
    income BIGINT,
    cost BIGINT
)""" )
cursor.execute(f"INSERT INTO shop_business(name, income, cost) VALUES ('‚òïÔ∏è –ö–∞—Ñ–µ', {add_cash / 6}, {add_cash * 20})")
cursor.execute(f"INSERT INTO shop_business(name, income, cost) VALUES ('üöß –õ–æ–≥–∏—Å—Ç–∏–∫–∞ –∏ –¥–æ—Å—Ç–∞–≤–∫–∞', {add_cash * 1.8 / 6}, {add_cash * 1.8 * 40})")
cursor.execute(f"INSERT INTO shop_business(name, income, cost) VALUES ('üè• –ê–ø—Ç–µ–∫–∞', {add_cash * 1.8 * 2 / 6}, {add_cash * 1.8 * 4 * 50})")
cursor.execute(f"INSERT INTO shop_business(name, income, cost) VALUES ('üòé –ö–∏–Ω–æ—Ç–µ–∞—Ç—Ä', {add_cash * 1.8 * 3 / 6}, {add_cash * 1.8 * 8 * 60})")
cursor.execute(f"INSERT INTO shop_business(name, income, cost) VALUES ('üíª –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ü–û', {add_cash * 1.8 * 7 / 6}, {add_cash * 1.8 * 16 * 70})")
cursor.execute(f"INSERT INTO shop_business(name, income, cost) VALUES ('üöó –ê–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–π –¥–∏–ª–µ—Ä', {add_cash * 1.8 * 14 / 6}, {add_cash * 1.8 * 32 * 80})")
cursor.execute(f"INSERT INTO shop_business(name, income, cost) VALUES ('üì¢ –†–µ–∫–ª–∞–º–Ω–æ–µ –∞–≥–µ–Ω—Ç—Å—Ç–≤–æ', {add_cash * 1.8 * 30 / 6}, {add_cash * 1.8 * 64 * 90})")
cursor.execute(f"INSERT INTO shop_business(name, income, cost) VALUES ('üíé –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ', {add_cash * 1.8 * 60 / 6}, {add_cash * 1.8 * 128 * 100})")


# 2 - –ú–∞–π–Ω–∏–Ω–≥ —Ñ–µ—Ä–º—ã
cursor.execute( "DROP TABLE IF EXISTS shop_farm" )
cursor.execute( """CREATE TABLE IF NOT EXISTS shop_farm (
    farm_id SERIAL PRIMARY KEY,
    name TEXT,
    income BIGINT,
    cost BIGINT
)""" )
cursor.execute(f"INSERT INTO shop_farm(name, income, cost) VALUES ('üéí Ebang Ebit E12+', {add_cash / 5 / 37}, {add_cash * 1.8 * 30})")
cursor.execute(f"INSERT INTO shop_farm(name, income, cost) VALUES ('üéí Whatsminer M32-70', {add_cash * 1.8 / 5 / 37}, {add_cash * 1.8 * 2 * 50})")
cursor.execute(f"INSERT INTO shop_farm(name, income, cost) VALUES ('üéí StrongU STU-U8', {add_cash * 1.8 * 2 / 5 / 37}, {add_cash * 1.8 * 4 * 60})")
cursor.execute(f"INSERT INTO shop_farm(name, income, cost) VALUES ('üéí Innosilicon A11 Pro', {add_cash * 1.8 * 4 / 5 / 37}, {add_cash * 1.8 * 8 * 70})")
cursor.execute(f"INSERT INTO shop_farm(name, income, cost) VALUES ('üíé Antminer S19 Pro', {add_cash * 1.8 * 8 / 5 / 37}, {add_cash * 1.8 * 16 * 80})")

# 3 - –î–æ–º
cursor.execute( "DROP TABLE IF EXISTS shop_house" )
cursor.execute( """CREATE TABLE IF NOT EXISTS shop_house (
    house_id SERIAL PRIMARY KEY,
    name TEXT,
    cost BIGINT
)""" )
cursor.execute(f"INSERT INTO shop_house(name, cost) VALUES ('–•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫ —Å–æ—Å–µ–¥–∞', 180000)")
cursor.execute(f"INSERT INTO shop_house(name, cost) VALUES ('–ö–≤–∞—Ä—Ç–∏—Ä–∞', 555000)")
cursor.execute(f"INSERT INTO shop_house(name, cost) VALUES ('–û—Å–æ–±–Ω—è–∫', 7300000)")

# 4 - –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç
cursor.execute( "DROP TABLE IF EXISTS shop_car" )
cursor.execute( """CREATE TABLE IF NOT EXISTS shop_car (
    car_id SERIAL PRIMARY KEY,
    name TEXT,
    cost BIGINT
)""" )
cursor.execute(f"INSERT INTO shop_car(name, cost) VALUES ('–õ–∞–¥–∞ –∫–∞–ª–∏–Ω–∞', 368000)")
cursor.execute(f"INSERT INTO shop_car(name, cost) VALUES ('–ú–∞–∫–ª–∞—Ä–µ–Ω', 5580000)")
cursor.execute(f"INSERT INTO shop_car(name, cost) VALUES ('–ò—Å—Ç—Ä–µ–±–∏—Ç–µ–ª—å', 22700000)")


connection.commit()

#######

# 1 - –ü—Ä–æ—Ñ–µ—Å—Å–∏—è





back_game_ikb = functions.set_back_button('game')

async def game_shop_func(call, shop_list):
    # –ø—Ä–æ—Ö–æ–¥–∏–º –ø–æ —Å–ø–∏—Å–∫—É: [[list1, 'business'], [list2, 'farm']]
    for shop in shop_list:
        ikb_list = '' # temp-–ª–∏—Å—Ç
        data = shop[-1] # 'business'
        item_count = 0 # —Å—á—ë—Ç—á–∏–∫ —Å–ø–∏—Å–∫–æ–≤: [list1, 'business']
        # –ø—Ä–æ—Ö–æ–¥–∏–º –ø–æ —Å–ø–∏—Å–∫—É: [list1, 'business']
        for shop_item in shop[0]:
            item_count += 1

            check_income = shop_item[0]

            if check_income:
                title = shop_item[1]
                income = shop_item[2]
                cost = shop_item[3]
                symb = shop_item[4]
            else:
                title = shop_item[1]
                income = ''
                cost = shop_item[2]
                symb = ''


            ikb_list += f'[InlineKeyboardButton(f"{title} - {cost}$", callback_data = f"shop_item_{data}{item_count}")],'

            # —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞
            if call.data == f'shop_item_{data}{item_count}':
                ikb = InlineKeyboardMarkup(inline_keyboard = [
                    # [InlineKeyboardButton('–ö—É–ø–∏—Ç—å', callback_data = f'game_shop_buy_{data}{item_count}')] if functions.check_user_business(call) != True else [InlineKeyboardButton('–ü—Ä–æ–¥–∞—Ç—å —Å–≤–æ–π –±–∏–∑–Ω–µ—Å', callback_data = f'null')]
                    [InlineKeyboardButton('–ö—É–ø–∏—Ç—å', callback_data = f'game_shop_buy_{data}{item_count}')]
                ])
                functions.ButtonBack(ikb, f'game_shop_{data}')

                await call.message.delete()
                await call.message.answer_photo(eval(f'var.img_shop_{data}'), f'{title}\n\n–°—Ç–æ–∏–º–æ—Å—Ç—å: {cost}$\n\n–î–æ—Ö–æ–¥: {income}{symb} –≤ —á–∞—Å\n\nüí∞ –í–∞—à –±–∞–ª–∞–Ω—Å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç: {functions.get_balance(call)}$', reply_markup = ikb)

            # –∫—É–ø–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞
            if call.data == f'game_shop_buy_{data}{item_count}':
                cursor.execute(f"SELECT cash FROM game WHERE id = {call.from_user.id}")
                balance_user = cursor.fetchone()[0]
                if cost > balance_user:
                    await call.message.delete()
                    await call.message.answer_photo(var.img_error, f'‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –ù–µ—Ö–∞–≤–∞—Ç–∞–µ—Ç: {cost - balance_user}$\n\n–°—Ç–æ–∏–º–æ—Å—Ç—å: {cost}$\n\nüí∞ –í–∞—à –±–∞–ª–∞–Ω—Å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç: {balance_user}$', reply_markup = functions.set_back_button(f'game_shop_{data}'))
                
                else:
                    img = var.img_error

                    # TODO –º–æ–∂–Ω–æ –∑–∞—Å—É–Ω—É—Ç—å –≤ –ª–∏—Å—Ç
                    if data == 'business' and functions.check_user_business(call) == True:
                        description = f'‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –±–∏–∑–Ω–µ—Å! –ß—Ç–æ–±—ã –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –Ω–æ–≤—ã–π –±–∏–∑–Ω–µ—Å - –≤–∞–º –Ω—É–∂–Ω–æ –ø—Ä–æ–¥–∞—Ç—å —Å–≤–æ–π —Å—Ç–∞—Ä—ã–π'
                    
                    elif data == 'farm' and functions.check_user_farm(call) == True:
                        description = f'‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –º–∞–π–Ω–∏–Ω–≥ —Ñ–µ—Ä–º–∞! –ß—Ç–æ–±—ã –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –Ω–æ–≤—É—é —Ñ–µ—Ä–º—É - –≤–∞–º –Ω—É–∂–Ω–æ –ø—Ä–æ–¥–∞—Ç—å —Å–≤–æ—é —Å—Ç–∞—Ä—É—é'

                    elif data == 'house' and functions.check_user_house(call) == True:
                        description = f'‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –¥–æ–º! –ß—Ç–æ–±—ã –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –Ω–æ–≤—ã–π –¥–æ–º - –≤–∞–º –Ω—É–∂–Ω–æ –ø—Ä–æ–¥–∞—Ç—å —Å–≤–æ–π —Å—Ç–∞—Ä—ã–π'

                    elif data == 'car' and functions.check_user_car(call) == True:
                        description = f'‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç! –ß—Ç–æ–±—ã –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –Ω–æ–≤—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç - –≤–∞–º –Ω—É–∂–Ω–æ –ø—Ä–æ–¥–∞—Ç—å —Å–≤–æ–π —Å—Ç–∞—Ä—ã–π'

                    else:
                        buyed = f"(SELECT {data}_id FROM shop_{data} WHERE name = '{title}')"
                        cursor.execute(f"(SELECT cash FROM game WHERE id = {call.from_user.id})")
                        cash_info = cursor.fetchone()[0]
                        cursor.execute(f"UPDATE game SET cash = {cash_info} - {cost}, {data}_id = {buyed} WHERE id = {call.from_user.id}")
                        connection.commit()

                        img = var.img_buyed
                        description = f'‚úÖ –í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ "{title}". –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å —É—Å–ø–µ—à–Ω–æ–π –ø–æ–∫—É–ø–∫–æ–π!\n\n{functions.get_new_balance(cash_info, call)}\n\nüçÉ –¢–µ–ø–µ—Ä—å –≤–∞—à –¥–æ—Ö–æ–¥ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç: {income}{symb} –≤ —á–∞—Å'
                    
                    await call.message.delete()
                    await call.message.answer_photo(img, description, reply_markup = back_game_ikb)

        # –∏–º—É—â–µ—Å—Ç–≤–∞ (–±–∏–∑–Ω–µ—Å—ã, –º–∞–π–Ω–∏–Ω–≥ —Ñ–µ—Ä–º—ã...)
        if call.data == f'game_shop_{data}':

            # –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å—Ç—å –∏–º—É—â–µ—Å—Ç–≤–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?
            cursor.execute(f"SELECT {data}_id FROM game WHERE id = {call.from_user.id}")
            business_id = cursor.fetchone()
            if business_id != None:
                business_id = business_id[0]

            # –µ—Å–ª–∏ –±–∏–∑–Ω–µ—Å
            if call.data == f'game_shop_business':
                ikb = eval(f'''InlineKeyboardMarkup(inline_keyboard=[
                    {ikb_list}
                    [InlineKeyboardButton(f'üí∏ –°–Ω—è—Ç—å {functions.get_business_cash(call)}$', callback_data = 'game_take_business')] if functions.get_business_cash(call) != 0 else '',
                    [InlineKeyboardButton('‚ÄºÔ∏è –ü—Ä–æ–¥–∞—Ç—å –±–∏–∑–Ω–µ—Å', callback_data = f'game_shop_sell_{data}')] if business_id != None else '',
                    functions.set_button_back_ikb('game')
                ])''')
                img = var.img_shop_business

                cursor.execute(f"SELECT name FROM shop_business WHERE business_id = (SELECT business_id FROM game WHERE id = {call.from_user.id})")
                name_select = cursor.fetchone()


                description = f"–£ –≤–∞—Å –Ω–µ—Ç –±–∏–∑–Ω–µ—Å–∞, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–æ—Å–∏–ª –±—ã –¥–æ—Ö–æ–¥" if functions.get_business_income(call) == None else f"–£ –≤–∞—Å {name_select[0]}\n\n–î–æ—Ö–æ–¥: +{functions.get_business_income(call)[0]}{symb} –≤ —á–∞—Å"
            
            # –µ—Å–ª–∏ —Ñ–µ—Ä–º–∞
            elif call.data == f'game_shop_farm':
                ikb = eval(f'''InlineKeyboardMarkup(inline_keyboard=[
                    {ikb_list}
                    [InlineKeyboardButton('‚ôªÔ∏è –û–±–º–µ–Ω—è—Ç—å {functions.get_crypto(call)}‚ú¶ –Ω–∞ $', callback_data = 'game_change_crypto')] if functions.get_crypto(call) != 0 else '',
                    [InlineKeyboardButton('‚ÄºÔ∏è –ü—Ä–æ–¥–∞—Ç—å –º–∞–π–Ω–∏–Ω–≥ —Ñ–µ—Ä–º—É', callback_data = f'game_shop_sell_{data}')] if business_id != None else '',
                    functions.set_button_back_ikb('game')
                ])''')
                img = var.img_shop_farm

                cursor.execute(f"SELECT name FROM shop_farm WHERE farm_id = (SELECT farm_id FROM game WHERE id = {call.from_user.id})")
                name_select = cursor.fetchone()

                description = f"–£ –≤–∞—Å –Ω–µ—Ç –º–∞–π–Ω–∏–Ω–≥ —Ñ–µ—Ä–º—ã, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–æ—Å–∏–ª–∞ –±—ã –¥–æ—Ö–æ–¥" if functions.get_farm_income(call) == None else f"–£ –≤–∞—Å {name_select[0]}\n\n–î–æ—Ö–æ–¥: +{functions.get_farm_income(call)[0]}{symb} –≤ —á–∞—Å"
            
            # –µ—Å–ª–∏ –¥–æ–º
            elif call.data == f'game_shop_house':
                ikb = eval(f'''InlineKeyboardMarkup(inline_keyboard=[
                    {ikb_list}
                    [InlineKeyboardButton('‚ÄºÔ∏è –ü—Ä–æ–¥–∞—Ç—å –¥–æ–º', callback_data = f'game_shop_sell_{data}')] if business_id != None else '',
                    functions.set_button_back_ikb('game')
                ])''')
                img = var.img_bonus_yes # todo IMG
                description = 'None' # todo –æ–ø–∏—Å–∞–Ω–∏–µ
            
            # –µ—Å–ª–∏ –º–∞—à–∏–Ω–∞
            elif call.data == f'game_shop_car':
                ikb = eval(f'''InlineKeyboardMarkup(inline_keyboard=[
                    {ikb_list}
                    [InlineKeyboardButton('‚ÄºÔ∏è –ü—Ä–æ–¥–∞—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç', callback_data = f'game_shop_sell_{data}')] if business_id != None else '',
                    functions.set_button_back_ikb('game')
                ])''')
                img = var.img_bonus_yes # todo IMG
                description = 'None' # todo –æ–ø–∏—Å–∞–Ω–∏–µ


            await call.message.delete()
            await call.message.answer_photo(img, description, reply_markup = ikb)



        # –ø—Ä–æ–¥–∞–∂–∞ –∏–º—É—â–µ—Å—Ç–≤–∞
        if call.data == f'game_shop_sell_{data}':
            idd = (f"(SELECT {data}_id FROM game WHERE id = {call.from_user.id})")
            cursor.execute(f"SELECT cost FROM shop_{data} WHERE {data}_id = {idd}")
            cost_data = cursor.fetchone()[0]
            cursor.execute(f"(SELECT cash FROM game WHERE id = {call.from_user.id})")
            cash_old = cursor.fetchone()[0]
            cursor.execute(f"UPDATE game SET {data}_id = Null, cash = {cash_old} + ({cost_data} / 2) WHERE id = {call.from_user.id}")
            connection.commit()

            await call.message.delete()
            await call.message.answer_photo(var.img_sell, f'‚úÖ –í—ã –ø—Ä–æ–¥–∞–ª–∏ –∏–º—É—â–µ—Å—Ç–≤–æ –∑–∞: {int(cost_data / 2)}$\n\n{functions.get_new_balance(cash_old, call)}', reply_markup = back_game_ikb)
   





async def game_func(call: types.CallbackQuery):
    # –æ–±–º–µ–Ω –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
    if call.data == 'game_change_crypto':
        old_balance = functions.get_balance(call)
        crypto = functions.get_crypto(call)
        cursor.execute(f"UPDATE game SET cash = cash + (crypto * 37), crypto = 0 WHERE id = {call.from_user.id}")
        connection.commit()
        balance_desc = functions.get_new_balance(old_balance, call)

        await call.message.delete()
        await call.message.answer_photo(var.img_sell, f'‚úÖ {crypto}‚ú¶ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–∞–Ω—ã –∑–∞ {crypto * 37}$ –∏ –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å! \n\n{balance_desc}', reply_markup = back_game_ikb)

    # –≤—ã–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏ —Å–æ —Å—á—ë—Ç–∞ –±–∏–∑–Ω–µ—Å–∞
    if call.data == 'game_take_business':
        old_balance = functions.get_balance(call)
        business_cash = functions.get_business_cash(call)
        cursor.execute(f"UPDATE game SET cash = cash + business_cash, business_cash = 0 WHERE id = {call.from_user.id}")
        connection.commit()
        balance_desc = functions.get_new_balance(old_balance, call)

        await call.message.delete()
        # todo IMG
        await call.message.answer_photo(var.img_sell, f'‚úÖ –î–µ–Ω—å–≥–∏ <i>({business_cash}$)</i> –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ —Å–Ω—è—Ç—ã —Å —Å—á—ë—Ç–∞ –±–∏–∑–Ω–µ—Å–∞ –∏ –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å! \n\n{balance_desc}', reply_markup = back_game_ikb)





async def game_shop(call: types.CallbackQuery):
    
    list1 = []
    cursor.execute("SELECT * FROM shop_business")
    for i in cursor.fetchall():
        list1.append([True, i[1], i[2], i[3], '$'])

    list2 = []
    cursor.execute("SELECT * FROM shop_farm")
    for i in cursor.fetchall():
        list2.append([True, i[1], i[2], i[3], '‚ú¶'])

    list3 = []
    cursor.execute("SELECT * FROM shop_house")
    for i in cursor.fetchall():
        list3.append([False, i[1], i[2]])

    list4 = []
    cursor.execute("SELECT * FROM shop_car")
    for i in cursor.fetchall():
        list4.append([False, i[1], i[2]])


    shop_list = [[list1, 'business'], [list2, 'farm'], [list3, 'house'], [list4, 'car']]
    
    await game_shop_func(call, shop_list)



def reg_game_shop(dp: Dispatcher):
    print('[COGS] game/shop - is connected')
    dp.register_callback_query_handler(game_shop, lambda c: c.data.startswith(('game_shop', 'shop_item')))
    dp.register_callback_query_handler(game_func, Text(['game_change_crypto', 'game_take_business']))