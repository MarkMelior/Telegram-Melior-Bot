from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ContentType, LabeledPrice
from aiogram import types
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters import Text
from aiogram import Dispatcher, types
import var
import functions
from SQL import cursor, connection
import asyncio
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State



# SQL –ë–ê–ó–ê –î–ê–ù–ù–´–•
# cursor.execute( "DROP TABLE  IF EXISTS course_neural" )
cursor.execute("""CREATE TABLE IF NOT EXISTS course_neural (
    id BIGINT,
    lesson1 BOOLEAN DEFAULT false,
    lesson2 BOOLEAN DEFAULT false,
    lesson3 BOOLEAN DEFAULT false,
    lesson4 BOOLEAN DEFAULT false,
    lesson5 BOOLEAN DEFAULT false,
    lesson6 BOOLEAN DEFAULT false,
    lesson7 BOOLEAN DEFAULT false,
    lesson8 BOOLEAN DEFAULT false,
    lesson9 BOOLEAN DEFAULT false
    );""")
connection.commit()



# –§–£–ù–ö–¶–ò–ò
# –¥–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–¥ –∫—É—Ä—Å–∞
def add_course(call):
    cursor.execute(f"SELECT id FROM course_neural WHERE id = {call.from_user.id}")
    if cursor.fetchone() == None:
        cursor.execute(f"INSERT INTO course_neural(id) VALUES ({call.from_user.id})")
        connection.commit()

# –ø—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–¥
def check_course(call):
    cursor.execute(f"SELECT id FROM course_neural WHERE id = {call.from_user.id}")
    return cursor.fetchone()

# –ø—Ä–æ–≤–µ—Ä–∫–∞, –ø—Ä–æ–π–¥–µ –ª–∏ —É—Ä–æ–∫
def check_lesson(call, lesson):
    cursor.execute(f"SELECT {lesson} FROM course_neural WHERE id = {call.from_user.id}")
    return cursor.fetchone()[0]

# –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤
def lesson_count(call):
    cursor.execute(f"SELECT * FROM course_neural WHERE id = {call.from_user.id}")
    results = cursor.fetchone()
    i = 0
    for result in results[1:]:
        if result == False:
            return i
        i += 1

# –æ–ø–∏—Å–∞–Ω–∏–µ
def close_lesson_desc(call, chapter, lesson):
    text = f'''
<strong>[ –ì–ª–∞–≤–∞ {chapter} / –£—Ä–æ–∫ {lesson} ]</strong>

‚ùå –£—Ä–æ–∫ –µ—â—ë –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, —Ç—ã –Ω–µ –ø—Ä–æ—à—ë–ª {lesson_count(call) + 1} —É—Ä–æ–∫!
    '''
    return text

# —à–∞–±–ª–æ–Ω course_neural_more
async def course_more(call, data, text, img = None, ikb = None):
    if call.data == data:
        if img == None:
            img = var.img_neural
        if ikb == None:
            ikb = courseBack_ikb
        await call.message.delete()
        await call.message.answer_photo(img, caption = text, reply_markup = ikb)


# –¥–æ–±–∞–≤–∏—Ç—å –≥–ª–∞–≤—É
async def add_chapter(call, lesson_list):
    chapter_count = 0
    lesson_count = 0
    for lesson in lesson_list:
        chapter_count += 1

        ikbList1 = ''
        for i in lesson[0]:
            lesson_count += 1
            ikbList1 += f"[InlineKeyboardButton('–£—Ä–æ–∫ {lesson_count}. {i[0]}', callback_data = 'neural_lesson{lesson_count}')],"

            ikbList2 = ''
            if call.data == f'neural_lesson{str(lesson_count)}':
                from bot import bot

                if lesson_count - 1 != 0:
                    if check_lesson(call, f'lesson{str(int(lesson_count) - 1)}') == False:
                        # –≤–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–∞–º
                        BackChapter_ikb = InlineKeyboardMarkup(inline_keyboard = [
                            ])
                        functions.ButtonBack(BackChapter_ikb, f'neural_chapter{str(chapter_count)}')
                        
                        await call.message.delete()
                        await call.message.answer_photo(var.img_close, caption = close_lesson_desc(call, chapter_count, lesson_count), reply_markup = BackChapter_ikb)

                        return


                for n in lesson[0][0][3]:
                    ikbList2 += f'[InlineKeyboardButton("{n[0]}", url = "{n[1]}")],'

                finish_lesson = ''

                cursor.execute(f"SELECT lesson{str(lesson_count)} FROM course_neural WHERE id = {call.from_user.id}")
                if cursor.fetchone()[0] != True:
                    finish_lesson = f"[InlineKeyboardButton('‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —É—Ä–æ–∫', callback_data = 'neural_lesson_finish{lesson_count}')]"

                ikb = eval(f"""InlineKeyboardMarkup(inline_keyboard = [
                    {ikbList2}
                    {finish_lesson}
                ])""")
                functions.ButtonBack(ikb, f'neural_chapter{str(chapter_count)}')

                await call.message.delete()      
                await bot.send_video(chat_id = call.message.chat.id, caption = f'<strong>[ –ì–ª–∞–≤–∞ {chapter_count} / –£—Ä–æ–∫ {lesson_count} ]</strong> ‚Äî {i[0]} \n \n' + i[2], video = i[1], reply_markup = ikb)
                
            
            if call.data == f'neural_lesson_finish{str(lesson_count)}':
                cursor.execute(f'UPDATE course_neural SET lesson{str(lesson_count)} = True WHERE id = {call.from_user.id}')
                connection.commit()
                
                await call.message.delete()
                await call.message.answer_photo(var.img_lesson_finish, caption = f'‚úÖ <strong>[ –ì–ª–∞–≤–∞ {chapter_count} / –£—Ä–æ–∫ {lesson_count} ]</strong> ‚Äî ¬´{i[0]}¬ª —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω! \n \n –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å :D', reply_markup = courseFinish_ikb)


        if call.data == f'neural_chapter{str(chapter_count)}':
            ikb = eval(f"""InlineKeyboardMarkup(inline_keyboard=[
                {ikbList1}
            ])""")
            functions.ButtonBack(ikb, 'course_neural')
            
            await call.message.delete()
            await call.message.answer_photo(var.img_neural, caption = f'<strong>[ –ì–ª–∞–≤–∞ {chapter_count} ]</strong> - ' + lesson[1], reply_markup = ikb)



# –ì–õ–ê–í–ù–ê–Ø –°–¢–†–ê–ù–ò–¶–ê
async def course_neural(call: types.CallbackQuery):
    ikb = courseNeural_ikb
    desc = courseNeural_desc
    # –µ—Å–ª–∏ –ø—Ä–∏–æ–±—Ä—ë–ª –∫—É—Ä—Å
    if check_course(call) != None:
        list1 = []
        list2 = []
        
        list1.append(['–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä', var.video_null, '''–û–ù –°–ê–ú–´–ô –ü–†–û–°–¢–û–ô –ò –î–≠–§–û–õ–¢–ù–´–ô''', [['Python Release 3.10.6', 'https://www.python.org/downloads/release/python-3106/'], ['Git', 'https://git-scm.com/'], ['Stable Diffusion UI', 'https://github.com/AUTOMATIC1111/stable-diffusion-webui']]])
        list1.append(['–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞ Google Collab', var.video_null, '–≠—Ç–æ—Ç —É—Ä–æ–∫ –ø–æ—Å–ª–æ–∂–Ω–µ–µ, –Ω–æ –ø—Ä–∏–∫–æ–ª—å–Ω—ã–π —Ç–æ–∂–µ', [['Colaboratory', 'https://colab.research.google.com/github/TheLastBen/fast-stable-diffusion/blob/main/fast_stable_diffusion_AUTOMATIC1111.ipynb']]])
        list1.append(['lesson_title3', var.video_null, '–≠—Ç–æ—Ç —É—Ä–æ–∫ –µ—â—ë –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–π. \n \n  –ù—É–∂–Ω–æ –ø–æ—Å—Ç–∞—Ä–∞—Ç—å—Å—è –ø—Ä—è–º', [['–§–∞–π–ª 1', 'https://telegra.ph/Course-FAQ-04-23']]])
        list2.append(['lesson_title4', var.video_null, '–≠—Ç–æ—Ç —É—Ä–æ–∫ –µ—â—ë –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–π. \n \n  –ù—É–∂–Ω–æ –ø–æ—Å—Ç–∞—Ä–∞—Ç—å—Å—è –ø—Ä—è–º', [['Hello 2', 'https://telegra.ph/Course-FAQ-04-23'], ['Hi 2', 'https://telegra.ph/Course-FAQ-04-23']]])
        lesson_list = [[list1, '–£—Å—Ç–∞–Ω–æ–≤–∫–∞, Google Collab'], [list2, '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –∑–∞–ø—Ä–æ—Å—É (txt2img)']]
        
        await add_chapter(call, lesson_list)

        chapter_count = 0
        test = ''
        for lesson in lesson_list:
            chapter_count += 1
            test += f"[InlineKeyboardButton('[–ì–ª–∞–≤–∞ {chapter_count}] - {str(lesson[1])}', callback_data = 'neural_chapter{str(chapter_count)}')],"

        ikb = eval(f"""InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton('üëæ –û –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏', callback_data = 'inf_neural_profession'), InlineKeyboardButton('‚ùì FAQ', url='https://telegra.ph/Course-FAQ-04-23')],
            {test}
        ])""")
        functions.ButtonBack(ikb)

        desc = f'''
üëæ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –∫—É—Ä—Å –ø–æ Stable Diffusion. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!

‚úÖ –¢—ã —Å–µ–π—á–∞—Å –Ω–∞ {lesson_count(call) + 1} —É—Ä–æ–∫–µ
        '''

    if call.data == 'course_neural':
        await call.message.delete()
        await call.message.answer_photo(photo = var.img_neural, caption = desc, reply_markup = ikb)

    if call.data == 'course_neural_pay':
        await call.message.answer_photo(photo = var.img_neural, caption = desc, reply_markup = ikb)






courseNeural_desc = f'üëæ –ö—É—Ä—Å <strong>¬´Neural Dreaming 2023¬ª</strong> –æ—Ç Mark Melior \n\n<span class="tg-spoiler">üéÅ –ü–æ–¥–ø–∏—Å—á–∏–∫–∞–º <strong>¬´Melior Exclusive¬ª</strong> —Å–∫–∏–¥–∫–∞: <strong>-{var.exclusive_discount}‚ÇΩ</strong></span>\n \n–í —Ä–∞–º–∫–∞—Ö –∫—É—Ä—Å–∞ –≤—ã –Ω–∞—É—á–∏—Ç–µ—Å—å —Ä–∞–±–æ—Ç–∞—Ç—å –≤ Stable Diffusion ‚Äî —ç—Ç–æ –Ω–µ–π—Ä–æ—Å–µ—Ç—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –æ–ø–∏—Å–∞–Ω–∏—é\n \n–ü–æ—Å–ª–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –∫—É—Ä—Å–∞ –≤—ã —Å –ª—ë–≥–∫–æ—Å—Ç—å—é —Å–º–æ–∂–µ—Ç–µ –≤–æ–ø–ª–æ—Ç–∏—Ç—å –ª—é–±—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å. –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ ‚Äî –≤–∞—à–∞ —Ñ–∞–Ω—Ç–∞–∑–∏—è'

# –ö–õ–ê–í–ò–ê–¢–£–†–´
# –µ—Å–ª–∏ –Ω–µ –ø—Ä–∏–æ–±—Ä—ë–ª
courseNeural_ikb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton('üëæ –û –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏', callback_data = 'inf_neural_profession'), InlineKeyboardButton('‚ùì FAQ', url='https://telegra.ph/Course-FAQ-04-23')],
    [InlineKeyboardButton('–ö–æ–º—É –ø–æ–¥–æ–π–¥—ë—Ç?', callback_data = 'inf_neural_who')],
    [InlineKeyboardButton('–ß–µ–º—É –≤—ã –Ω–∞—É—á–∏—Ç–µ—Å—å?', callback_data = 'inf_neural_learn')],
    # [InlineKeyboardButton('–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∫—É—Ä—Å–∞', callback_data = 'inf_neural_content')],
    [InlineKeyboardButton('–ö–∞–∫ –ø—Ä–æ—Ö–æ–¥–∏—Ç –æ–±—É—á–µ–Ω–∏–µ?', callback_data = 'inf_neural_training')],
    [InlineKeyboardButton('‚ùå –ö—É—Ä—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω', callback_data = 'nope')],
    # [InlineKeyboardButton('ü§ë –ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –∫—É—Ä—Å', callback_data = 'course_neural_buy')],
])
functions.ButtonBack(courseNeural_ikb)

# –∫–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é
courseBack_ikb = InlineKeyboardMarkup(inline_keyboard = [

])
functions.ButtonBack(courseBack_ikb, 'course_neural')

# –æ–ø–ª–∞—Ç–∞
coursePay_ikb = InlineKeyboardMarkup(inline_keyboard = [
    [InlineKeyboardButton(f"üíµ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", pay = True)]
])
functions.ButtonBack(coursePay_ikb)

# –∫–Ω–æ–ø–∫–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫—É—Ä—Å–∞
courseFinish_ikb = InlineKeyboardMarkup(inline_keyboard = [
    [InlineKeyboardButton('üß© –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≥–ª–∞–≤–∞–º', callback_data = 'course_neural')]
])

# –∫–Ω–æ–ø–∫–∞ –¥–ª—è course_more(call, 'inf_neural_training'...)
inf_neural_training_ikb = InlineKeyboardMarkup(inline_keyboard = [
    [InlineKeyboardButton(f"‚≠ïÔ∏è –ü—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫", callback_data='course_neural_test')]
])
functions.ButtonBack(inf_neural_training_ikb, 'course_neural')


# –û –ö–£–†–°–ï
async def course_neural_more(call: types.CallbackQuery):

    await course_more(call, 'inf_neural_profession', '<strong>üëæ –û –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏</strong>' \
    '\n \n–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ Stable Diffusion ‚Äî —ç—Ç–æ —É–Ω–∏–∫–∞–ª—å–Ω–∞—è –∏ –≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–æ—Ñ–µ—Å—Å–∏—è –≤ –æ–±–ª–∞—Å—Ç–∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫–∏. –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å—Ç–∞—Ç—å —ç–∫—Å–ø–µ—Ä—Ç–æ–º –≤ —ç—Ç–æ–π –æ–±–ª–∞—Å—Ç–∏, —Ç–æ –∫—É—Ä—Å –ø–æ Stable Diffusion –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å –≤–∞–º –¥–æ—Å—Ç–∏—á—å –≤–∞—à–∏—Ö —Ü–µ–ª–µ–π' \
    '\n \n–°–µ–≥–æ–¥–Ω—è –º–Ω–æ–≥–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –Ω—É–∂–¥–∞—é—Ç—Å—è –≤ –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö –¥–ª—è —Å–≤–æ–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤, —Ç–∞–∫–∏—Ö –∫–∞–∫ —Ä–µ–∫–ª–∞–º–Ω—ã–µ –±–∞–Ω–Ω–µ—Ä—ã, –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–∏, –∞–Ω–∏–º–∞—Ü–∏—è –∏ –¥–∞–∂–µ —Ñ–∏–ª—å–º—ã' \
    '\n \n<i>‚úÖ –¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, –ø—Ä–æ—Ñ–µ—Å—Å–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ Stable Diffusion ‚Äî —ç—Ç–æ –º–Ω–æ–≥–æ–æ–±–µ—â–∞—é—â–∞—è –∏ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω–∞—è –∫–∞—Ä—å–µ—Ä–∞, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç –ø—Ä–∏–Ω–µ—Å—Ç–∏ –≤–∞–º —É—Å–ø–µ—Ö –∏ –ø—Ä–∏–±—ã–ª—å –≤ —Å—Ñ–µ—Ä–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫–∏</i>')
    
    await course_more(call, 'inf_neural_who', 'üßê <strong>–ö–æ–º—É –ø–æ–¥–æ–π–¥—ë—Ç?</strong>' \
    '\n \n- –î–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–æ–≤ –≤ –æ–±–ª–∞—Å—Ç–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫–∏, –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è, –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞, –∞ —Ç–∞–∫–∂–µ –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç—è—Ç –∏–∑—É—á–∏—Ç—å –Ω–æ–≤—É—é –∏ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—É—é –æ–±–ª–∞—Å—Ç—å'\
    '\n \n- –ö—É—Ä—Å –±—É–¥–µ—Ç –ø–æ–ª–µ–∑–µ–Ω –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Å—Ñ–µ—Ä–µ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞, —Ä–µ–∫–ª–∞–º—ã, —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏–≥—Ä, —Ñ–∏–ª—å–º–æ–≤, –∞–Ω–∏–º–∞—Ü–∏–∏ –∏ –¥—Ä—É–≥–∏—Ö –æ–±–ª–∞—Å—Ç–µ–π, –≥–¥–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π'\
    '\n \n- –ö—Ä–æ–º–µ —Ç–æ–≥–æ, —ç—Ç–æ—Ç –∫—É—Ä—Å –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, –∞—Å–ø–∏—Ä–∞–Ω—Ç–æ–≤ –∏ –Ω–∞—É—á–Ω—ã—Ö —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç—è—Ç –∏–∑—É—á–∏—Ç—å –Ω–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ –º–µ—Ç–æ–¥—ã –≤ –æ–±–ª–∞—Å—Ç–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫–∏ –∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è'\
    '\n \n<i>‚úÖ –¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, –∫—É—Ä—Å –ø–æ Stable Diffusion –ø–æ–¥–æ–π–¥–µ—Ç –≤—Å–µ–º, –∫—Ç–æ —Ö–æ—á–µ—Ç –∏–∑—É—á–∏—Ç—å –Ω–æ–≤—É—é –∏ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—É—é –æ–±–ª–∞—Å—Ç—å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫–∏, –∏ –¥–æ—Å—Ç–∏—á—å —É—Å–ø–µ—Ö–∞ –≤ —Å–≤–æ–µ–π –∫–∞—Ä—å–µ—Ä–µ</i>')
    
    await course_more(call, 'inf_neural_learn', '‚ö°Ô∏è <strong>–ß–µ–º—É –≤—ã –Ω–∞—É—á–∏—Ç–µ—Å—å?</strong>'\
    '\n \n- –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª—é–±–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞'\
    '\n \n- –ì—Ä–∞–º–æ—Ç–Ω–æ —Å–æ—Å—Ç–∞–≤–ª—è—Ç—å prompt, —Ç–æ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–∑–≤–æ–ª—è—Ç –≤–∞–º –ø–æ–ª—É—á–∞—Ç—å –Ω—É–∂–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã'\
    '\n \n- –í—ã —Ç–∞–∫–∂–µ –ø–æ–¥—Ä–æ–±–Ω–æ –∏–∑—É—á–∏—Ç–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Stable Diffusion, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–∏–ª—É—á—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã'\
    '\n \n- –ö—Ä–æ–º–µ —Ç–æ–≥–æ, –Ω–∞ –∫—É—Ä—Å–µ –≤—ã –Ω–∞—É—á–∏—Ç–µ—Å—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ç–µ—Ö–Ω–∏–∫–µ Upscale, —Ç–æ –µ—Å—Ç—å –º–µ—Ç–æ–¥–∞–º —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–µ–∑ –ø–æ—Ç–µ—Ä–∏ –∫–∞—á–µ—Å—Ç–≤–∞'\
    '\n \n- –í—ã —Ç–∞–∫–∂–µ –Ω–∞—É—á–∏—Ç–µ—Å—å –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≥–æ—Ä—è—á–∏–π 18+ –º–∞—Ç–µ—Ä–∏–∞–ª, –µ—Å–ª–∏ —ç—Ç–∞ —Ç–µ–º–∞ –¥–ª—è –≤–∞—Å –∞–∫—Ç—É–∞–ª—å–Ω–∞'\
    '\n \n<i>‚úÖ –¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, –≤—ã –Ω–∞—É—á–∏—Ç–µ—Å—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ª—é–±—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª—é–±–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏, –∏—Å–ø–æ–ª—å–∑—É—è —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏ –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –∏–∑—É—á–∏—Ç–µ –Ω–∞ –∫—É—Ä—Å–µ</i>', var.img_neural_work)
    
    
    # await course_more(call, 'inf_neural_content', 'üß© <strong>–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∫—É—Ä—Å–∞</strong> \n \n–û–±—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç–µ, –∫–æ—Ç–æ—Ä—ã–π –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –∫—É—Ä—Å—É –∏ –ø–æ–º–æ–≥–∞–µ—Ç –≤–∞–º –∏–∑—É—á–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª –ø–æ —à–∞–≥–∞–º \n \n–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º —É—Ä–æ–∫–µ, –≤—ã–ø–æ–ª–Ω—è—Ç—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è –∏ –ø–æ–ª—É—á–∞—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –æ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è \n \n–ë–æ—Ç —Ç–∞–∫–∂–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–±—â–µ–Ω–∏—è —Å –¥—Ä—É–≥–∏–º–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏ –∫—É—Ä—Å–∞ –∏ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é')
    # –∫–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é
    await course_more(call, 'inf_neural_training', 'üéì <strong>–ö–∞–∫ –ø—Ä–æ—Ö–æ–¥–∏—Ç –æ–±—É—á–µ–Ω–∏–µ?</strong> \n \n–û–±—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç–µ, –∫–æ—Ç–æ—Ä—ã–π –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –∫—É—Ä—Å—É –∏ –ø–æ–º–æ–≥–∞–µ—Ç –≤–∞–º –∏–∑—É—á–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª –ø–æ —à–∞–≥–∞–º. –í—ã —Ç–∞–∫–∂–µ –ø–æ–ª—É—á–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏ –æ–±—Å—É–¥–∏—Ç—å —É—Ä–æ–∫–∏ —Å –¥—Ä—É–≥–∏–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –∫—É—Ä—Å–∞ –≤ —á–∞—Ç–µ' \
    '\n \n–ß–∞—Ç-–±–æ—Ç –±—É–¥–µ—Ç –≤—ã–¥–∞–≤–∞—Ç—å –≤–∞–º –¥–æ—Å—Ç—É–ø –∫ –Ω–æ–≤—ã–º —É—Ä–æ–∫–∞–º –ø–æ –º–µ—Ä–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö. –¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ –≤ —É–¥–æ–±–Ω–æ–º –¥–ª—è –≤–∞—Å —Ç–µ–º–ø–µ, –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—è—Å—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∏ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —É–≥–ª—É–±–ª—è—è —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –∏ –Ω–∞–≤—ã–∫–∏' \
    '\n \n–ö–∞–∂–¥—ã–π —É—Ä–æ–∫ –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è, –ø—Ä–∏–º–µ—Ä—ã –∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –≤–∞–º –ª—É—á—à–µ –ø–æ–Ω–∏–º–∞—Ç—å —Ç–µ–º—É –∏ –∑–∞–∫—Ä–µ–ø–ª—è—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∑–Ω–∞–Ω–∏—è –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ' \
    '\n \n–ö—Ä–æ–º–µ —Ç–æ–≥–æ, –Ω–∞ –∫—É—Ä—Å–µ –±—É–¥—É—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ —Ä–µ—Å—É—Ä—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –≤–∞–º —É–≥–ª—É–±–∏—Ç—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –≤ –æ–±–ª–∞—Å—Ç–∏ Stable Diffusion', ikb = inf_neural_training_ikb)



# –û–ü–õ–ê–¢–ê
async def course_neural_buy(call: types.CallbackQuery, state: FSMContext):
    # –ó–ê–ü–û–ú–ù–ò–õ–ò –°–û–û–ë–©–ï–ù–ò–ï
    async with state.proxy() as data:
        data['state_pay'] = 'neural_course'

    cursor.execute(f"SELECT id FROM course_neural WHERE id = {call.from_user.id}")
    if cursor.fetchone() != None:
        await call.message.edit_media(types.InputMediaPhoto(var.img_error))
        await call.message.edit_caption(f'–¢—ã —É–∂–µ –ø—Ä–∏–æ–±—Ä—ë–ª –∫—É—Ä—Å!', reply_markup = courseBack_ikb)
        return
    
    from bot import bot, config
    await call.message.delete()

    ex_discount = types.LabeledPrice(label='–°–∫–∏–¥–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ Melior Exclusive', amount = 0)
    cursor.execute(f"SELECT id FROM users WHERE exclusive IS NOT NULL AND id = {call.from_user.id}")
    if cursor.fetchone() != None:
        ex_discount = types.LabeledPrice(label='–°–∫–∏–¥–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ Melior Exclusive', amount = -var.exclusive_discount * 100)

    await bot.send_invoice(call.message.chat.id,
                            title = "–û–ø–ª–∞—Ç–∞ –∫—É—Ä—Å–∞ ¬´Neural Dreaming 2023¬ª",
                            description = 'üçÉ –Ø –∑–Ω–∞—é, —á—Ç–æ —ç—Ç–æ –º–æ–∂–µ—Ç –ø–æ–∫–∞–∑–∞—Ç—å—Å—è –¥–æ—Ä–æ–≥–∏–º, –Ω–æ –ø–æ–≤–µ—Ä—å –º–Ω–µ, —ç—Ç–æ —Å—Ç–æ–∏—Ç –∫–∞–∂–¥–æ–π –∫–æ–ø–µ–π–∫–∏ \n \nüìå –ö–∞–∫ –≥–æ–≤–æ—Ä–∏—Ç—Å—è, "–∫—É–ø–∏ –¥–µ—à–µ–≤–æ ‚Äî –∫—É–ø–∏ –¥–≤–∞–∂–¥—ã", –∞ —è –æ–±–µ—â–∞—é, —á—Ç–æ –ø–æ—Å–ª–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –∫—É—Ä—Å–∞ —Ç—ã –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–æ–∂–∞–ª–µ–µ—à—å –æ —Å–≤–æ–µ–π –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏!',
                            provider_token = config.tg_bot.paymaster,
                            currency = "rub",
                            photo_url = var.img_pay,
                            prices = [
                                types.LabeledPrice(
                                    label = "–î–æ—Å—Ç—É–ø –∫ –∫—É—Ä—Å—É",
                                    amount = var.neural_price * 100
                                ),
                                types.LabeledPrice(
                                    label = "–í–∞—à–∞ —Å–∫–∏–¥–∫–∞",
                                    amount = -var.neural_discount * 100
                                ),
                                ex_discount
                            ],
                            max_tip_amount = 2000 * 100,
                            suggested_tip_amounts = [50 * 100, 100 * 100, 200 * 100, 300 * 100],
                            photo_height = 1080,
                            photo_width = 1440,
                            is_flexible = False,
                            reply_markup = coursePay_ikb,
                            start_parameter = "neural-cource-app",
                            payload = {"payload_key": "testt-invoice-payload-neural"}
                            )



async def course_neural_test(call: types.CallbackQuery):
    from bot import bot
    await call.message.delete()      
    await bot.send_video(chat_id = call.message.chat.id, caption = f'<strong>[ –ì–ª–∞–≤–∞ 2 / –£—Ä–æ–∫ 4 ]</strong> ‚Äî –ö—Ä—É—Ç–æ–π —É—Ä–æ–∫ \n \n–û–ø–∏—Å–∞–Ω–∏–µ', video = var.video_null, reply_markup = courseBack_ikb)





# –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï
def reg_neural(dp: Dispatcher):
    print('[COGS] neural - is connected')
    dp.register_callback_query_handler(course_neural, lambda c: c.data.startswith(('neural_lesson', 'neural_chapter')) or c.data in ['course_neural'])
    dp.register_callback_query_handler(course_neural_more, lambda c: c.data.startswith('inf_neural'))
    dp.register_callback_query_handler(course_neural_buy, Text(['course_neural_buy']))

    dp.register_callback_query_handler(course_neural_test, Text(['course_neural_test']))