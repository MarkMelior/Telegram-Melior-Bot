from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ContentType
from aiogram.dispatcher.filters import Text
from aiogram import Dispatcher, types
import functions
import var
from datetime import datetime, timedelta
import asyncio
from cogs.config import load_config
import var
from SQL import cursor, connection
from datetime import datetime
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State


# cursor.execute( "DROP TABLE  IF EXISTS users" )
cursor.execute("""CREATE TABLE IF NOT EXISTS users (
    id BIGINT,
    exclusive DATE
    );""")
connection.commit()



ExclusiveMainDesc = '''
üíé –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –ø–æ–¥–ø–∏—Å–∫–∏ <strong>¬´Melior Work¬ª</strong>:

‚úÖ –î–æ—Å—Ç—É–ø –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª:
‚Ä¢ –£—Ä–æ–∫–∏, –≥–∞–π–¥—ã –∏ —Ñ–∞–π–ª—ã –ø–æ –ù–µ–π—Ä–æ—Å–µ—Ç—è–º (Stabble Diffusion, ChatGPT)
‚Ä¢ –£—Ä–æ–∫–∏, –≥–∞–π–¥—ã –∏ —Ñ–∞–π–ª—ã –ø–æ 3D –ì—Ä–∞—Ñ–∏–∫–µ (Blender, UE5)
‚Ä¢ –£—Ä–æ–∫–∏, –≥–∞–π–¥—ã –∏ —Ñ–∞–π–ª—ã –ø–æ –ú–æ–Ω—Ç–∞–∂—É (After Effect, Premier Pro)
‚Ä¢ –ó–∞–ø–∏—Å–∏ –≤—Å–µ—Ö —Å—Ç—Ä–∏–º–æ–≤

‚úÖ –î–æ—Å—Ç—É–ø –Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π Discord —Å–µ—Ä–≤–µ—Ä:
‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–æ–±—â–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π –Ω–∞ —Å—Ç—Ä–∏–º–µ
‚Ä¢ –î–æ—Å—Ç—É–ø –≤ –∑–∞–∫—Ä—ã—Ç—ã–π —á–∞—Ç ‚Å†Discord
‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–ª–∞—Ç–Ω—ã—Ö —Ä–æ–ª–µ–π: <i>2x –±–æ–Ω—É—Å—ã, –¥–æ—Å—Ç—É–ø –∫ –∑–∞–∫—Ä—ã—Ç—ã–º –∫–∞–Ω–∞–ª–∞–º, –≤—Å–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏, –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–∏–≥—Ä–∞—Ç—å x5-x50 –≤ –∫–∞–∑–∏–Ω–æ</i>
'''

PriceDesc = f'''–ï—Å–ª–∏ –≤–∞–º –ø–æ–∫–∞–∂–µ—Ç—Å—è —á—Ç–æ —Ü–µ–Ω–∞ 800 —Ä—É–±–ª–µ–π –±–æ–ª—å—à–∞—è, —Ç–æ –≤—Å–ø–æ–º–Ω–∏—Ç–µ —á—Ç–æ –Ω–µ–ø–æ–¥–∞–ª—ë–∫—É –æ—Ç –≤–∞—Å —Å—Ç–æ–∏—Ç –∫–∏–æ—Å–∫, –≤ –∫–æ—Ç–æ—Ä–æ–º —à–∫–æ–ª—å–Ω–∏–∫ –ø–æ–∫—É–ø–∞–µ—Ç —Å–µ–±–µ HQD –∑–∞ —ç—Ç–∏ –∂–µ {var.price_exclusive_rub} —Ä—É–±–ª–µ–π'''

ikbExclusive = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton('‚ú® Discord —Å–µ—Ä–≤–µ—Ä?', callback_data = 'discord'), InlineKeyboardButton('üíé –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data = 'buy')],
    # [InlineKeyboardButton('‚ú® Discord —Å–µ—Ä–≤–µ—Ä?', callback_data = 'discord')],
    # [InlineKeyboardButton('‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞', callback_data = 'nope')]
])
functions.ButtonBack(ikbExclusive)



ikbExclusive2 = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton('üíé –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data='buy')]
])
functions.ButtonBack(ikbExclusive2, 'exclusive_back')


DiscordMainDesc = '''
‚ú® –ü—Ä–∏–≤–∞—Ç–Ω—ã–π Discord —Å–µ—Ä–≤–µ—Ä

–ù–∞—à —Å–µ—Ä–≤–µ—Ä –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç Discord –±–æ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ ChatGPT, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–±–∞–≤–∏—Ç –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –≤ –Ω–∞—à–∏ –æ–±—â–∏–µ –±–µ—Å–µ–¥—ã. –ë–æ—Ç —Ç–∞–∫–∂–µ –∏–º–µ–µ—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é —ç–∫–æ–Ω–æ–º–∏–∫—É, –≥–¥–µ —Ç—ã –º–æ–∂–µ—à—å –∏–≥—Ä–∞—Ç—å –Ω–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é –≤–∞–ª—é—Ç—É –∏ –ø—Ä–æ–∫–∞—á–∏–≤–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å. –¢–∞–∫ —á—Ç–æ, –µ—Å–ª–∏ —Ç—ã –ª—é–±–∏—à—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –¥–∏—Å–∫—É—Å—Å–∏–∏ –∏ –∏–≥—Ä—ã, —Ç–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –Ω–∞–º —É–∂–µ —Å–µ–≥–æ–¥–Ω—è! 

‚ù§Ô∏è <i>–°–µ—Ä–≤–µ—Ä —Å–æ–∑–¥–∞–Ω –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å –¥—Ä—É–∑—å—è–º–∏ –∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º–∏ <strong>¬´Melior Work¬ª</strong></i>
'''

ikbDiscord = InlineKeyboardMarkup(inline_keyboard=[
])
functions.ButtonBack(ikbDiscord, 'exclusive_back')



# –û–°–ù–û–í–ê

async def exclusive(call: types.CallbackQuery):
    await call.message.delete()
    await call.message.answer_photo(photo = var.img_ex, caption = ExclusiveMainDesc, reply_markup = ikbExclusive)
    
async def discord(call: types.CallbackQuery):
    await call.message.delete()
    await call.message.answer_photo(photo = var.img_discord, caption = DiscordMainDesc, reply_markup = ikbNull)






ikbNull = InlineKeyboardMarkup(inline_keyboard=[
])
functions.ButtonBack(ikbNull, 'exclusive')


exPay_ikb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(f"üíµ –û–ø–ª–∞—Ç–∏—Ç—å {var.price_exclusive_rub}‚ÇΩ –Ω–∞ –º–µ—Å—è—Ü", pay = True)],
])
functions.ButtonBack(exPay_ikb)

# –û–ü–õ–ê–¢–ê
async def buy(call: types.CallbackQuery, state: FSMContext):
    cursor.execute(f"SELECT id FROM users WHERE exclusive IS NOT NULL AND id = {call.from_user.id}")
    if cursor.fetchone() != None:
        await call.message.delete()
        await call.message.answer_photo(var.img_ex, f'''
–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞! –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ {functions.get_date_ex(call)}

–°—Å—ã–ª–∫–∞: {var.ex_chat_link}

<i>* –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –ø—Ä–∏–Ω—è—Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, —Ç.–∫. –≤—ã —è–≤–ª—è–µ—Ç–µ—Å—å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–º</i>''', reply_markup = ikbNull)
        return
    
    # –ó–ê–ü–û–ú–ù–ò–õ–ò –°–û–û–ë–©–ï–ù–ò–ï
    async with state.proxy() as data:
        data['state_pay'] = 'exclusive'

    from bot import bot, config
    await call.message.delete()
    await bot.send_invoice(call.message.chat.id,
                            title = "–ü–æ–¥–ø–∏—Å–∫–∞ ¬´Melior Work¬ª –Ω–∞ –º–µ—Å—è—Ü",
                            description = f'üìå –ï—Å–ª–∏ –≤–∞–º –ø–æ–∫–∞–∂–µ—Ç—Å—è —á—Ç–æ —Ü–µ–Ω–∞ {var.price_exclusive_rub} —Ä—É–±–ª–µ–π –≤ –º–µ—Å—è—Ü –±–æ–ª—å—à–∞—è, —Ç–æ –≤—Å–ø–æ–º–Ω–∏—Ç–µ —á—Ç–æ –Ω–µ–ø–æ–¥–∞–ª—ë–∫—É –æ—Ç –≤–∞—Å —Å—Ç–æ–∏—Ç –∫–∏–æ—Å–∫, –≤ –∫–æ—Ç–æ—Ä–æ–º —à–∫–æ–ª—å–Ω–∏–∫ –ø–æ–∫—É–ø–∞–µ—Ç —Å–µ–±–µ HQD –∑–∞ —ç—Ç–∏ –∂–µ {var.price_exclusive_rub} —Ä—É–±–ª–µ–π',
                            provider_token = config.tg_bot.paymaster,
                            currency = "rub",
                            photo_url = var.img_pay,
                            prices = [
                                types.LabeledPrice(
                                    label = "–î–æ—Å—Ç—É–ø –∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É —Ç–µ–ª–µ–≥—Ä–∞–º—É",
                                    amount = var.price_exclusive_rub * 100
                                )
                            ],
                            max_tip_amount = 2000 * 100,
                            suggested_tip_amounts = [50 * 100, 100 * 100, 200 * 100, 300 * 100],
                            photo_height = 1080,
                            photo_width = 1440,
                            is_flexible = False,
                            reply_markup = exPay_ikb,
                            start_parameter = "one-month-subscription",
                            payload = {"payload_key": "testt-invoice-payload"}
                            )





# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π –ø–æ –ø–æ–¥–∞—á–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ
async def exclusive_app_member(update: types.ChatJoinRequest):
    cursor.execute(f"SELECT id FROM users WHERE exclusive IS NOT NULL AND id = {update.from_user.id}")
    from bot import bot
    if cursor.fetchone() != None:
        await bot.approve_chat_join_request(chat_id = var.ex_chat_id, user_id = update.from_user.id)
        await bot.send_photo(chat_id = update.from_user.id, photo = var.img_accept_member, caption = f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ <strong>¬´Melior Work¬ª</strong> –ø—Ä–∏–Ω—è—Ç–∞! \n\n–ü–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ {functions.get_date_ex(update)}", reply_markup = var.ikbClose)
    else:
        msg = await bot.send_photo(chat_id = update.from_user.id, photo = var.img_cancel_member, caption = "‚≠ïÔ∏è –ß—Ç–æ–±—ã –≤–∞—à—É –∑–∞—è–≤–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –ø—Ä–∏–Ω—è–ª–∏ ‚Äî –Ω—É–∂–Ω–æ –∏–º–µ—Ç—å –ø–æ–¥–ø–∏—Å–∫—É <strong>¬´Melior Work¬ª</strong> \n\n<i>–°–æ–æ–±—â–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å—á–µ–∑–Ω–µ—Ç —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥</i>", reply_markup = var.ikbClose)
        await asyncio.sleep(30)
        await msg.delete()







# # ! –†–ï–§–ï–†–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê
# # —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
# cursor.execute('''CREATE TABLE IF NOT EXISTS users
#                   (id INTEGER PRIMARY KEY AUTOINCREMENT,
#                    user_id INTEGER,
#                    referral_link TEXT,
#                    subscribed INTEGER)''')


# # –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
# @dp.message_handler(commands=['start'])
# async def start_handler(message: types.Message):
#     from bot import bot

#     # –ø–æ–ª—É—á–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π ID –∏–∑ –∫–æ–º–∞–Ω–¥—ã /start (–µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å)
#     referral_link = await bot.create_chat_invite_link(var.live_chat_id, name = 'Referral link')

#     if message.chat.type == 'private' and referral_link.endswith(var.ex_chat_id):
#         # –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
#         user_id = message.from_user.id
#         cursor.execute("INSERT INTO users (user_id, referral_link, subscribed) VALUES (?, ?, ?)",
#                         (user_id, referral_link, 0))
#         connection.commit()
#         # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–¥–ø–∏—Å–∫–µ –Ω–∞ –∫–∞–Ω–∞–ª
#         await message.reply("–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–æ–Ω—Ç–µ–Ω—Ç—É –∫–∞–Ω–∞–ª–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–µ–≥–æ.")
#     else:
#         await message.reply("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞.")


# # –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
# @dp.channel_post_handler()
# async def channel_post_handler(message: types.Message):
#     # –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
#     user_id = message.from_user.id
#     cursor.execute("UPDATE users SET subscribed = 1 WHERE user_id = ?", (user_id,))
#     connection.commit()








def reg_exclusive(dp: Dispatcher):
    print('[COGS] exclusive - is connected')

    dp.register_callback_query_handler(exclusive, Text('exclusive'))
    dp.register_callback_query_handler(discord, Text('discord'))

    dp.register_chat_join_request_handler(exclusive_app_member) # –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ

    # –û–ø–ª–∞—Ç–∞
    dp.register_callback_query_handler(buy, Text('buy'))