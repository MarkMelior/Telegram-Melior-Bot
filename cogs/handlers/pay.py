from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ContentType
from aiogram import Dispatcher, types
import functions
import var
from datetime import datetime, timedelta
import var
from SQL import cursor, connection
from datetime import datetime
from aiogram.dispatcher import FSMContext
from cogs.handlers.course.neural import add_course, courseBack_ikb


# –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–∫–∞–∑ (–æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª—É—á–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥)
async def pre_checkout_query(pre_checkout_q: types.PreCheckoutQuery, state: FSMContext):
    # async with state.proxy() as data:
    #     if data['state_pay'] == 'exclusive':
    from bot import bot
    await bot.answer_pre_checkout_query(pre_checkout_q.id, ok=True)


ikbBuyed = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton('üìé –ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data = 'start_save')]
])

# –£–°–ü–ï–®–ù–ê–Ø –û–ü–õ–ê–¢–ê
async def successful_payment(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        if data['state_pay'] == 'exclusive':
            # –ü–†–û–í–ï–†–ö–ê –ù–ê –°–£–©–ï–°–¢–í–û –í –ë–î
            functions.check_user_db(message)

            # –î–û–ë–ê–í–õ–ï–ù–ò–ï 30 –î–ù–ï–ô –ü–û–î–ü–ò–°–ö–ò
            date_sub = (datetime.now() + timedelta(days = 30)).strftime("%Y-%m-%d %H:%M:%S")
            cursor.execute(f"UPDATE users SET exclusive = '{date_sub}' WHERE id = {message.from_user.id}")
            connection.commit()
            
            # –ò–ù–§–ô–û–†–ú–ê–¶–ò–Ø –û –ü–õ–ê–¢–ï–ñ–ï
            payment_info = message.successful_payment.to_python()
            for k, v in payment_info.items():
                print(f"{k} = {v}")

            await functions.send_admin(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ñ–æ—Ä–º–∏–ª –ø–æ–¥–ø–∏—Å–∫—É <strong>¬´Melior Exclusive¬ª</strong> \n\n –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞—Ç–µ–∂–µ: {payment_info}')


            # –û–¢–ü–†–ê–í–ö–ê –°–û–û–ë–©–ï–ù–ò–Ø
            await message.answer_photo(photo = var.img_thanks, caption = f'''
‚úÖ –û–ª–ª–∞—Ç–∞ –Ω–∞ —Å—É–º–º—É {message.successful_payment.total_amount // 100} {message.successful_payment.currency} –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!

–ü–æ–¥–ø–∏—Å–∫–∞ <strong>¬´Melior Exclusive¬ª</strong> –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ {functions.get_date_ex(message)}

–°—Å—ã–ª–∫–∞: {var.ex_chat_link}

<i>* –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –ø—Ä–∏–Ω—è—Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, —Ç.–∫. –≤—ã —è–≤–ª—è–µ—Ç–µ—Å—å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–º</i>
            ''', reply_markup = ikbBuyed)

        if data['state_pay'] == 'neural_course':
            # –∏–Ω—Ñ–æ –æ –ø–ª–∞—Ç–µ–∂–µ
            payment_info = message.successful_payment.to_python()
            for k, v in payment_info.items():
                print(f"{k} = {v}")

            await functions.send_admin(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∫—É–ø–∏–ª –∫—É—Ä—Å <strong>Neural Dreaming 2023</strong> \n\n –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞—Ç–µ–∂–µ: {payment_info}')
            add_course(message)
            await message.answer_photo(photo = var.img_thanks, caption = f'‚úÖ –û–ª–ª–∞—Ç–∞ –Ω–∞ —Å—É–º–º—É {message.successful_payment.total_amount // 100} {message.successful_payment.currency} –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! \n \n –î–æ—Å—Ç—É–ø –∫ <strong>¬´Neural Dreaming 2023¬ª</strong> –ø–æ–ª—É—á–µ–Ω!', reply_markup = courseBack_ikb)


ikbExclusive3 = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton('üíé –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data='buy')]
])
functions.ButtonBack(ikbExclusive3)



def reg_pay(dp: Dispatcher):
    print('[COGS] pay - is connected')
    # –û–ø–ª–∞—Ç–∞
    dp.register_pre_checkout_query_handler(pre_checkout_query, lambda query: True)
    dp.register_message_handler(successful_payment, content_types = ContentType.SUCCESSFUL_PAYMENT)